{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\79267\\\\Desktop\\\\praktikum\\\\dev\\\\movies-explorer-frontend\\\\src\\\\components\\\\Movies\\\\Movies.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { moviesApi } from \"../../utils/MoviesApi\";\nimport SearchForm from \"../SearchForm/SearchForm\";\nimport MoviesCardList from \"../MoviesCardList/MoviesCardList\";\nimport { mainApi } from \"../../utils/MainApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Movies({\n  openPopupError\n}) {\n  _s();\n  const [renderMovies, setRenderMovies] = useState([]);\n  const [allMovies, setAllMovies] = useState([]);\n  const [shortMovies, setShortMovies] = useState([]);\n  //const [maxVisibleMovies, setMaxVisibleMovies] = useState(16);\n  const [savedMovies, setSavedMovies] = useState([]);\n  const [screenWidth, setScreenWidth] = useState(window.innerWidth);\n  //\n  const [maxVisibleMovies, setMaxVisibleMovies] = useState(() => {\n    let initialMaxMovies = 16;\n    if (screenWidth <= 1149) {\n      initialMaxMovies = 15;\n    } else if (screenWidth <= 1024) {\n      initialMaxMovies = 8;\n    } else if (screenWidth <= 749) {\n      initialMaxMovies = 5;\n    }\n    return initialMaxMovies;\n  });\n  //\n  const [usersMovies, setUsersMovies] = useState([]);\n  const [searched, setSearched] = useState(false);\n  const [extaSearched, setExtraSearched] = useState(false);\n  const [isShortMovies, setIsShortMovies] = useState(localStorage.getItem('isShortMovies')) || false;\n  useEffect(() => {\n    function handleResize() {\n      setScreenWidth(window.innerWidth);\n    }\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  useEffect(() => {\n    const storedValue = localStorage.getItem('isShortMovies');\n    if (storedValue === 'true') {\n      setIsShortMovies(true);\n    } else {\n      setIsShortMovies(false);\n    }\n  }, []);\n  useEffect(() => {\n    if (isShortMovies !== null) {\n      localStorage.setItem('isShortMovies', isShortMovies.toString());\n    }\n  }, [isShortMovies]);\n  useEffect(() => {\n    if (usersMovies) {\n      setSearched(true);\n      let filteredMovies;\n      if (isShortMovies) {\n        filteredMovies = usersMovies.filter(({\n          duration\n        }) => duration <= 40);\n      } else {\n        filteredMovies = usersMovies;\n      }\n\n      // Логика для определения maxVisibleMovies в зависимости от ширины экрана\n      let maxMoviesToShow = 16; // Значение по умолчанию\n\n      if (screenWidth <= 1149) {\n        maxMoviesToShow = 15;\n      } else if (screenWidth <= 1024) {\n        maxMoviesToShow = 8;\n      } else if (screenWidth <= 749) {\n        maxMoviesToShow = 5;\n      }\n      const updatedRenderMovies = filteredMovies.slice(0, maxMoviesToShow);\n      setMaxVisibleMovies(maxMoviesToShow);\n      setRenderMovies(updatedRenderMovies);\n    }\n  }, [isShortMovies, screenWidth, usersMovies]);\n  useEffect(() => {\n    mainApi.getMovies().then(data => {\n      setSavedMovies(data);\n    }).catch(err => {\n      console.log(err);\n      openPopupError(true);\n    });\n  }, [isShortMovies]);\n  useEffect(() => {\n    console.log(isShortMovies);\n  }, [isShortMovies]);\n  function findMovie(filter) {\n    moviesApi.getMovies().then(data => {\n      let filteredMovies = data.filter(({\n        nameRU\n      }) => nameRU.toLowerCase().includes(filter.toLowerCase()));\n      setAllMovies(filteredMovies);\n      setShortMovies(filteredMovies.filter(({\n        duration\n      }) => duration <= 40));\n      localStorage.setItem('allMovies', JSON.stringify(filteredMovies));\n      if (isShortMovies === true) {\n        setRenderMovies(allMovies);\n      } else {\n        setRenderMovies(shortMovies);\n      }\n      if (screenWidth <= 1149) {\n        setMaxVisibleMovies(15);\n      }\n      if (screenWidth <= 1024) {\n        setMaxVisibleMovies(8);\n      }\n      if (screenWidth <= 749) {\n        setMaxVisibleMovies(5);\n      }\n      setSearched(true);\n      setExtraSearched(true);\n    }).catch(error => {\n      console.log(`${error}`);\n      openPopupError(true);\n    });\n  }\n  function handleCheckboxChange() {\n    setIsShortMovies(!isShortMovies);\n    if (isShortMovies === true) {\n      setRenderMovies(allMovies);\n    } else {\n      setRenderMovies(shortMovies);\n    }\n  }\n  function loadMoreMovies() {\n    let cardsToAdd = 4;\n    if (screenWidth <= 1150) {\n      cardsToAdd = 3;\n    }\n    if (screenWidth <= 1025) {\n      cardsToAdd = 2;\n    }\n    setMaxVisibleMovies(currentMaxVisibleMovies => currentMaxVisibleMovies + cardsToAdd);\n  }\n  function updateVisibleMovies() {\n    if (!isShortMovies) {\n      const moviesToShow = allMovies.slice(0, maxVisibleMovies);\n      return moviesToShow;\n    } else {\n      const moviesToShow = shortMovies.slice(0, maxVisibleMovies);\n      return moviesToShow;\n    }\n  }\n  useEffect(() => {\n    if (searched && extaSearched) {\n      const updatedRenderMovies = updateVisibleMovies();\n      setRenderMovies(updatedRenderMovies);\n    }\n  }, [maxVisibleMovies, searched, isShortMovies, allMovies, shortMovies]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"movies\",\n    children: [/*#__PURE__*/_jsxDEV(SearchForm, {\n      findMovie: findMovie,\n      handleCheckboxChange: handleCheckboxChange,\n      isShortMovies: isShortMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), searched && extaSearched && renderMovies.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0424\\u0438\\u043B\\u044C\\u043C \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [searched && /*#__PURE__*/_jsxDEV(MoviesCardList, {\n        movies: renderMovies,\n        savedMovies: savedMovies,\n        openPopupError: openPopupError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 34\n      }, this), searched && usersMovies && (isShortMovies && renderMovies.length < usersMovies.filter(({\n        duration\n      }) => duration <= 40).length || !isShortMovies && renderMovies.length < usersMovies.length) && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"movies__moreMovies-btn\",\n        onClick: loadMoreMovies,\n        children: \"\\u0415\\u0449\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n}\n_s(Movies, \"iylqB+DG18UxAySJxe61RVv22V8=\");\n_c = Movies;\nexport default Movies;\n\n// import React, { useState, useEffect } from 'react';\n// import { moviesApi } from \"../../utils/MoviesApi\";\n// import SearchForm from \"../SearchForm/SearchForm\";\n// import MoviesCardList from \"../MoviesCardList/MoviesCardList\";\n// import { mainApi } from \"../../utils/MainApi\";\n\n// function Movies({ openPopupError }) {\n\n//     const [renderMovies, setRenderMovies] = useState([]);\n//     const [allMovies, setAllMovies] = useState([]);\n//     const [shortMovies, setShortMovies] = useState([]);\n//     const [maxVisibleMovies, setMaxVisibleMovies] = useState(16);\n//     const [savedMovies, setSavedMovies] = useState([])\n//     const [screenWidth, setScreenWidth] = useState(window.innerWidth);\n\n//     const [searched, setSearched] = useState(false);\n//     const [isShortMovies, setIsShortMovies] = useState(localStorage.getItem('isShortMovies')) || false\n\n//     useEffect(() => {\n//         function handleResize() {\n//             setScreenWidth(window.innerWidth);\n//         }\n\n//         window.addEventListener('resize', handleResize);\n\n//         return () => {\n//             window.removeEventListener('resize', handleResize);\n//         };\n//     }, []);\n\n//     useEffect(() => {\n//         const storedValue = localStorage.getItem('isShortMovies');\n//         if (storedValue === 'true') {\n//             setIsShortMovies(true);\n//         } else {\n//             setIsShortMovies(false);\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         if (isShortMovies !== null) {\n//             localStorage.setItem('isShortMovies', isShortMovies.toString());\n//         }\n//     }, [isShortMovies]);\n\n//     useEffect(() => {\n//         // const usersMovies = JSON.parse(localStorage.getItem('oldMovies'));\n//         // if (usersMovies) {\n//         //     setAllMovies(usersMovies);\n//         //     if (screenWidth < 1150) {\n//         //         setMaxVisibleMovies(15);\n//         //     } else {\n//         //         setMaxVisibleMovies(16);\n//         //     }\n\n//         //     if (isShortMovies) {\n//         //         const shortMovies = usersMovies.filter(({ duration }) => duration <= 40);\n//         //         setFilteredMovies(shortMovies);\n//         //     } else {\n//         //         setFilteredMovies(usersMovies);\n//         //     }\n//         //     setSearched(true);\n//         //     updateVisibleMovies();\n//         // }\n\n//         mainApi.getMovies()\n//             .then((data) => {\n//                 setSavedMovies(data);\n//             })\n//             .catch((err) => {\n//                 console.log(err);\n//                 openPopupError(true);\n//             });\n//     }, [isShortMovies]);\n\n//     useEffect(() => {\n//         console.log(isShortMovies)\n//     }, [isShortMovies]);\n\n//     function findMovie(filter) {\n//         moviesApi.getMovies()\n//             .then((data) => {\n//                 let filteredMovies = data.filter(({ nameRU }) => nameRU.toLowerCase().includes(filter.toLowerCase()));\n//                 setAllMovies(filteredMovies);\n//                 setShortMovies(filteredMovies.filter(({ duration }) => duration <= 40))\n\n//                 if (isShortMovies === true) {\n//                     setRenderMovies(allMovies)\n//                 } else {\n//                     setRenderMovies(shortMovies)\n//                 }\n\n//                 //localStorage.setItem('oldMovies', JSON.stringify(filteredMovies));\n\n//                 if (screenWidth < 1150) {\n//                     setMaxVisibleMovies(15);\n//                 } else {\n//                     setMaxVisibleMovies(16);\n//                 }\n\n//                 setSearched(true);\n//             })\n//             .catch((error) => {\n//                 console.log(`${error}`);\n//                 openPopupError(true)\n//             });\n//     }\n\n//     function handleCheckboxChange() {\n//         setIsShortMovies(!isShortMovies);\n//         if (isShortMovies === true) {\n//             setRenderMovies(allMovies)\n//         } else {\n//             setRenderMovies(shortMovies)\n//         }\n//     }\n\n//     function loadMoreMovies() {\n//         let cardsToAdd = 4;\n//         if (screenWidth <= 1150) {\n//             cardsToAdd = 3;\n//         }\n//         if (screenWidth <= 1025) {\n//             cardsToAdd = 2;\n//         }\n//         setMaxVisibleMovies((currentMaxVisibleMovies) => currentMaxVisibleMovies + cardsToAdd);\n//     }\n\n//     function updateVisibleMovies() {\n//         if (!isShortMovies) {\n//             const moviesToShow = allMovies.slice(0, maxVisibleMovies);\n//             return moviesToShow;\n//         } else {\n//             const moviesToShow = shortMovies.slice(0, maxVisibleMovies);\n//             return moviesToShow;\n//         }\n//     }\n\n//     useEffect(() => {\n//         if (searched) {\n//             const updatedRenderMovies = updateVisibleMovies();\n//             setRenderMovies(updatedRenderMovies);\n//         }\n//     }, [maxVisibleMovies, searched, isShortMovies, allMovies, shortMovies]);\n\n//     return (\n//         <main className=\"movies\">\n//             <SearchForm findMovie={findMovie} handleCheckboxChange={handleCheckboxChange} isShortMovies={isShortMovies} />\n//             {searched && renderMovies.length === 0 ? (\n//                 <p>Фильм не найден</p>\n//             ) : (\n//                 <>\n//                     {searched && <MoviesCardList movies={renderMovies} savedMovies={savedMovies} openPopupError={openPopupError} />}\n//                     {searched && ((isShortMovies && renderMovies.length < shortMovies.length) ||\n//                         (!isShortMovies && renderMovies.length < allMovies.length)) && (\n//                             <button className=\"movies__moreMovies-btn\" onClick={loadMoreMovies}>Еще</button>\n//                         )}\n//                 </>\n//             )}\n//         </main>\n//     );\n// }\n\n// export default Movies;\nvar _c;\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"names":["React","useState","useEffect","moviesApi","SearchForm","MoviesCardList","mainApi","jsxDEV","_jsxDEV","Fragment","_Fragment","Movies","openPopupError","_s","renderMovies","setRenderMovies","allMovies","setAllMovies","shortMovies","setShortMovies","savedMovies","setSavedMovies","screenWidth","setScreenWidth","window","innerWidth","maxVisibleMovies","setMaxVisibleMovies","initialMaxMovies","usersMovies","setUsersMovies","searched","setSearched","extaSearched","setExtraSearched","isShortMovies","setIsShortMovies","localStorage","getItem","handleResize","addEventListener","removeEventListener","storedValue","setItem","toString","filteredMovies","filter","duration","maxMoviesToShow","updatedRenderMovies","slice","getMovies","then","data","catch","err","console","log","findMovie","nameRU","toLowerCase","includes","JSON","stringify","error","handleCheckboxChange","loadMoreMovies","cardsToAdd","currentMaxVisibleMovies","updateVisibleMovies","moviesToShow","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","movies","onClick","_c","$RefreshReg$"],"sources":["C:/Users/79267/Desktop/praktikum/dev/movies-explorer-frontend/src/components/Movies/Movies.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { moviesApi } from \"../../utils/MoviesApi\";\r\nimport SearchForm from \"../SearchForm/SearchForm\";\r\nimport MoviesCardList from \"../MoviesCardList/MoviesCardList\";\r\nimport { mainApi } from \"../../utils/MainApi\";\r\n\r\nfunction Movies({ openPopupError }) {\r\n\r\n    const [renderMovies, setRenderMovies] = useState([]);\r\n    const [allMovies, setAllMovies] = useState([]);\r\n    const [shortMovies, setShortMovies] = useState([]);\r\n    //const [maxVisibleMovies, setMaxVisibleMovies] = useState(16);\r\n    const [savedMovies, setSavedMovies] = useState([])\r\n    const [screenWidth, setScreenWidth] = useState(window.innerWidth);\r\n    //\r\n    const [maxVisibleMovies, setMaxVisibleMovies] = useState(() => {\r\n        let initialMaxMovies = 16;\r\n\r\n        if (screenWidth <= 1149) {\r\n            initialMaxMovies = 15;\r\n        } else if (screenWidth <= 1024) {\r\n            initialMaxMovies = 8;\r\n        } else if (screenWidth <= 749) {\r\n            initialMaxMovies = 5;\r\n        }\r\n\r\n        return initialMaxMovies;\r\n    });\r\n    //\r\n    const [usersMovies, setUsersMovies] = useState([])\r\n\r\n    const [searched, setSearched] = useState(false);\r\n    const [extaSearched, setExtraSearched] = useState(false)\r\n\r\n    const [isShortMovies, setIsShortMovies] = useState(localStorage.getItem('isShortMovies')) || false\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setScreenWidth(window.innerWidth);\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const storedValue = localStorage.getItem('isShortMovies');\r\n        if (storedValue === 'true') {\r\n            setIsShortMovies(true);\r\n        } else {\r\n            setIsShortMovies(false);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isShortMovies !== null) {\r\n            localStorage.setItem('isShortMovies', isShortMovies.toString());\r\n        }\r\n    }, [isShortMovies]);\r\n\r\n    useEffect(() => {\r\n        if (usersMovies) {\r\n          setSearched(true);\r\n          let filteredMovies;\r\n          if (isShortMovies) {\r\n            filteredMovies = usersMovies.filter(({ duration }) => duration <= 40);\r\n          } else {\r\n            filteredMovies = usersMovies;\r\n          }\r\n      \r\n          // Логика для определения maxVisibleMovies в зависимости от ширины экрана\r\n          let maxMoviesToShow = 16; // Значение по умолчанию\r\n      \r\n          if (screenWidth <= 1149) {\r\n            maxMoviesToShow = 15;\r\n          } else if (screenWidth <= 1024) {\r\n            maxMoviesToShow = 8;\r\n          } else if (screenWidth <= 749) {\r\n            maxMoviesToShow = 5;\r\n          }\r\n      \r\n          const updatedRenderMovies = filteredMovies.slice(0, maxMoviesToShow);\r\n          setMaxVisibleMovies(maxMoviesToShow);\r\n          setRenderMovies(updatedRenderMovies);\r\n        }\r\n      }, [isShortMovies, screenWidth, usersMovies]);\r\n\r\n    useEffect(() => {\r\n        mainApi.getMovies()\r\n            .then((data) => {\r\n                setSavedMovies(data);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                openPopupError(true);\r\n            });\r\n    }, [isShortMovies]);\r\n\r\n    useEffect(() => {\r\n        console.log(isShortMovies)\r\n    }, [isShortMovies]);\r\n\r\n    function findMovie(filter) {\r\n        moviesApi.getMovies()\r\n            .then((data) => {\r\n                let filteredMovies = data.filter(({ nameRU }) => nameRU.toLowerCase().includes(filter.toLowerCase()));\r\n                setAllMovies(filteredMovies);\r\n                setShortMovies(filteredMovies.filter(({ duration }) => duration <= 40))\r\n                localStorage.setItem('allMovies', JSON.stringify(filteredMovies));\r\n\r\n                if (isShortMovies === true) {\r\n                    setRenderMovies(allMovies)\r\n                } else {\r\n                    setRenderMovies(shortMovies)\r\n                }\r\n\r\n                if (screenWidth <= 1149) {\r\n                    setMaxVisibleMovies(15);\r\n                }\r\n                if (screenWidth <= 1024) {\r\n                    setMaxVisibleMovies(8);\r\n                }\r\n                if (screenWidth <= 749) {\r\n                    setMaxVisibleMovies(5);\r\n                }\r\n\r\n                setSearched(true);\r\n                setExtraSearched(true)\r\n            })\r\n            .catch((error) => {\r\n                console.log(`${error}`);\r\n                openPopupError(true)\r\n            });\r\n    }\r\n\r\n    function handleCheckboxChange() {\r\n        setIsShortMovies(!isShortMovies);\r\n        if (isShortMovies === true) {\r\n            setRenderMovies(allMovies)\r\n        } else {\r\n            setRenderMovies(shortMovies)\r\n        }\r\n    }\r\n\r\n    function loadMoreMovies() {\r\n        let cardsToAdd = 4;\r\n        if (screenWidth <= 1150) {\r\n            cardsToAdd = 3;\r\n        }\r\n        if (screenWidth <= 1025) {\r\n            cardsToAdd = 2;\r\n        }\r\n        setMaxVisibleMovies((currentMaxVisibleMovies) => currentMaxVisibleMovies + cardsToAdd);\r\n    }\r\n\r\n    function updateVisibleMovies() {\r\n        if (!isShortMovies) {\r\n            const moviesToShow = allMovies.slice(0, maxVisibleMovies);\r\n            return moviesToShow;\r\n        } else {\r\n            const moviesToShow = shortMovies.slice(0, maxVisibleMovies);\r\n            return moviesToShow;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (searched && extaSearched) {\r\n            const updatedRenderMovies = updateVisibleMovies();\r\n            setRenderMovies(updatedRenderMovies);\r\n        }\r\n    }, [maxVisibleMovies, searched, isShortMovies, allMovies, shortMovies]);\r\n\r\n    return (\r\n        <main className=\"movies\">\r\n            <SearchForm findMovie={findMovie} handleCheckboxChange={handleCheckboxChange} isShortMovies={isShortMovies} />\r\n            {searched && extaSearched && renderMovies.length === 0 ? (\r\n                <p>Фильм не найден</p>\r\n            ) : (\r\n                <>\r\n                    {searched && <MoviesCardList movies={renderMovies} savedMovies={savedMovies} openPopupError={openPopupError} />}\r\n                    {searched && usersMovies && (\r\n                        (isShortMovies && renderMovies.length < usersMovies.filter(({ duration }) => duration <= 40).length) ||\r\n                        (!isShortMovies && renderMovies.length < usersMovies.length)\r\n                    ) && (\r\n                            <button className=\"movies__moreMovies-btn\" onClick={loadMoreMovies}>Еще</button>\r\n                        )}\r\n                </>\r\n            )}\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Movies;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { moviesApi } from \"../../utils/MoviesApi\";\r\n// import SearchForm from \"../SearchForm/SearchForm\";\r\n// import MoviesCardList from \"../MoviesCardList/MoviesCardList\";\r\n// import { mainApi } from \"../../utils/MainApi\";\r\n\r\n// function Movies({ openPopupError }) {\r\n\r\n//     const [renderMovies, setRenderMovies] = useState([]);\r\n//     const [allMovies, setAllMovies] = useState([]);\r\n//     const [shortMovies, setShortMovies] = useState([]);\r\n//     const [maxVisibleMovies, setMaxVisibleMovies] = useState(16);\r\n//     const [savedMovies, setSavedMovies] = useState([])\r\n//     const [screenWidth, setScreenWidth] = useState(window.innerWidth);\r\n\r\n//     const [searched, setSearched] = useState(false);\r\n//     const [isShortMovies, setIsShortMovies] = useState(localStorage.getItem('isShortMovies')) || false\r\n\r\n\r\n\r\n//     useEffect(() => {\r\n//         function handleResize() {\r\n//             setScreenWidth(window.innerWidth);\r\n//         }\r\n\r\n//         window.addEventListener('resize', handleResize);\r\n\r\n//         return () => {\r\n//             window.removeEventListener('resize', handleResize);\r\n//         };\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         const storedValue = localStorage.getItem('isShortMovies');\r\n//         if (storedValue === 'true') {\r\n//             setIsShortMovies(true);\r\n//         } else {\r\n//             setIsShortMovies(false);\r\n//         }\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         if (isShortMovies !== null) {\r\n//             localStorage.setItem('isShortMovies', isShortMovies.toString());\r\n//         }\r\n//     }, [isShortMovies]);\r\n\r\n//     useEffect(() => {\r\n//         // const usersMovies = JSON.parse(localStorage.getItem('oldMovies'));\r\n//         // if (usersMovies) {\r\n//         //     setAllMovies(usersMovies);\r\n//         //     if (screenWidth < 1150) {\r\n//         //         setMaxVisibleMovies(15);\r\n//         //     } else {\r\n//         //         setMaxVisibleMovies(16);\r\n//         //     }\r\n\r\n//         //     if (isShortMovies) {\r\n//         //         const shortMovies = usersMovies.filter(({ duration }) => duration <= 40);\r\n//         //         setFilteredMovies(shortMovies);\r\n//         //     } else {\r\n//         //         setFilteredMovies(usersMovies);\r\n//         //     }\r\n//         //     setSearched(true);\r\n//         //     updateVisibleMovies();\r\n//         // }\r\n\r\n//         mainApi.getMovies()\r\n//             .then((data) => {\r\n//                 setSavedMovies(data);\r\n//             })\r\n//             .catch((err) => {\r\n//                 console.log(err);\r\n//                 openPopupError(true);\r\n//             });\r\n//     }, [isShortMovies]);\r\n\r\n//     useEffect(() => {\r\n//         console.log(isShortMovies)\r\n//     }, [isShortMovies]);\r\n\r\n//     function findMovie(filter) {\r\n//         moviesApi.getMovies()\r\n//             .then((data) => {\r\n//                 let filteredMovies = data.filter(({ nameRU }) => nameRU.toLowerCase().includes(filter.toLowerCase()));\r\n//                 setAllMovies(filteredMovies);\r\n//                 setShortMovies(filteredMovies.filter(({ duration }) => duration <= 40))\r\n\r\n//                 if (isShortMovies === true) {\r\n//                     setRenderMovies(allMovies)\r\n//                 } else {\r\n//                     setRenderMovies(shortMovies)\r\n//                 }\r\n\r\n//                 //localStorage.setItem('oldMovies', JSON.stringify(filteredMovies));\r\n\r\n//                 if (screenWidth < 1150) {\r\n//                     setMaxVisibleMovies(15);\r\n//                 } else {\r\n//                     setMaxVisibleMovies(16);\r\n//                 }\r\n\r\n//                 setSearched(true);\r\n//             })\r\n//             .catch((error) => {\r\n//                 console.log(`${error}`);\r\n//                 openPopupError(true)\r\n//             });\r\n//     }\r\n\r\n//     function handleCheckboxChange() {\r\n//         setIsShortMovies(!isShortMovies);\r\n//         if (isShortMovies === true) {\r\n//             setRenderMovies(allMovies)\r\n//         } else {\r\n//             setRenderMovies(shortMovies)\r\n//         }\r\n//     }\r\n\r\n//     function loadMoreMovies() {\r\n//         let cardsToAdd = 4;\r\n//         if (screenWidth <= 1150) {\r\n//             cardsToAdd = 3;\r\n//         }\r\n//         if (screenWidth <= 1025) {\r\n//             cardsToAdd = 2;\r\n//         }\r\n//         setMaxVisibleMovies((currentMaxVisibleMovies) => currentMaxVisibleMovies + cardsToAdd);\r\n//     }\r\n\r\n//     function updateVisibleMovies() {\r\n//         if (!isShortMovies) {\r\n//             const moviesToShow = allMovies.slice(0, maxVisibleMovies);\r\n//             return moviesToShow;\r\n//         } else {\r\n//             const moviesToShow = shortMovies.slice(0, maxVisibleMovies);\r\n//             return moviesToShow;\r\n//         }\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         if (searched) {\r\n//             const updatedRenderMovies = updateVisibleMovies();\r\n//             setRenderMovies(updatedRenderMovies);\r\n//         }\r\n//     }, [maxVisibleMovies, searched, isShortMovies, allMovies, shortMovies]);\r\n\r\n//     return (\r\n//         <main className=\"movies\">\r\n//             <SearchForm findMovie={findMovie} handleCheckboxChange={handleCheckboxChange} isShortMovies={isShortMovies} />\r\n//             {searched && renderMovies.length === 0 ? (\r\n//                 <p>Фильм не найден</p>\r\n//             ) : (\r\n//                 <>\r\n//                     {searched && <MoviesCardList movies={renderMovies} savedMovies={savedMovies} openPopupError={openPopupError} />}\r\n//                     {searched && ((isShortMovies && renderMovies.length < shortMovies.length) ||\r\n//                         (!isShortMovies && renderMovies.length < allMovies.length)) && (\r\n//                             <button className=\"movies__moreMovies-btn\" onClick={loadMoreMovies}>Еще</button>\r\n//                         )}\r\n//                 </>\r\n//             )}\r\n//         </main>\r\n//     );\r\n// }\r\n\r\n// export default Movies;"],"mappings":"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ACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}