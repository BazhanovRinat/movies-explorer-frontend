{"ast":null,"code":"export default class MainApi {\n  constructor(data) {\n    this.url = data.url;\n    this.headers = data.headers;\n  }\n  _request(url, options) {\n    return fetch(url, options).then(this._checkResponse);\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // getInitialCards() {\n  //     return this._request(`${this.url}/cards`, {\n  //         headers: this.headers,\n  //     })\n  // }\n\n  // deleteCard(cardId) {\n  //     return this._request(`${this.url}/cards/${cardId}`, {\n  //         method: \"DELETE\",\n  //         headers: this.headers,\n  //     })\n  // }\n\n  // changeLikeCardStatus(cardId, isCardLike) {\n  //     if (isCardLike) {\n  //         return this.cardLike(cardId)\n  //     }\n  //     else {\n  //         return this.cardLikeRemove(cardId)\n  //     }\n  // }\n\n  // cardLike(cardId) {\n  //     return this._request(`${this.url}/cards/${cardId}/likes`, {\n  //         method: \"PUT\",\n  //         headers: this.headers,\n  //     })\n  // }\n\n  // cardLikeRemove(cardId) {\n  //     return this._request(`${this.url}/cards/${cardId}/likes`, {\n  //         method: \"DELETE\",\n  //         headers: this.headers,\n  //     })\n  // }\n\n  // postCard(item) {\n  //     return this._request(`${this.url}/cards/`, {\n  //         method: \"POST\",\n  //         headers: this.headers,\n  //         body: JSON.stringify({\n  //             name: item.name,\n  //             link: item.link\n  //         })\n  //     })\n  // }\n\n  setProfileInfo(item) {\n    return this._request(`${this.url}/users/me`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: item.name,\n        about: item.about\n      })\n    });\n  }\n\n  // setProfileAvatar(item) {\n  //     return this._request(`${this.url}/users/me/avatar`, {\n  //         method: \"PATCH\",\n  //         headers: this.headers,\n  //         body: JSON.stringify({\n  //             avatar: item.avatar,\n  //         })\n  //     })\n  // }\n\n  profileDataInstall() {\n    return this._request(`${this.url}/users/me`, {\n      headers: this.headers\n    });\n  }\n}\nconst token = localStorage.getItem('token');\nif (token) {\n  console.log('Токен:', token);\n} else {\n  console.log('Токен не найден в localStorage');\n}\nexport const mainApi = new MainApi({\n  url: 'https://api.bazhanov.rinat.diplom.nomoredomainsrocks.ru',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${token}`\n  },\n  credentials: 'include'\n});","map":{"version":3,"names":["MainApi","constructor","data","url","headers","_request","options","fetch","then","_checkResponse","res","ok","json","Promise","reject","status","setProfileInfo","item","method","body","JSON","stringify","name","about","profileDataInstall","token","localStorage","getItem","console","log","mainApi","credentials"],"sources":["C:/Users/79267/Desktop/praktikum/dev/movies-explorer-frontend/src/utils/MainApi.js"],"sourcesContent":["export default class MainApi {\r\n    constructor(data) {\r\n        this.url = data.url;\r\n        this.headers = data.headers;\r\n    }\r\n\r\n    _request(url, options) {\r\n        return fetch(url, options).then(this._checkResponse)\r\n    }\r\n\r\n    _checkResponse(res) {\r\n        if (res.ok) {\r\n            return res.json()\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n    }\r\n\r\n    // getInitialCards() {\r\n    //     return this._request(`${this.url}/cards`, {\r\n    //         headers: this.headers,\r\n    //     })\r\n    // }\r\n\r\n    // deleteCard(cardId) {\r\n    //     return this._request(`${this.url}/cards/${cardId}`, {\r\n    //         method: \"DELETE\",\r\n    //         headers: this.headers,\r\n    //     })\r\n    // }\r\n\r\n    // changeLikeCardStatus(cardId, isCardLike) {\r\n    //     if (isCardLike) {\r\n    //         return this.cardLike(cardId)\r\n    //     }\r\n    //     else {\r\n    //         return this.cardLikeRemove(cardId)\r\n    //     }\r\n    // }\r\n\r\n    // cardLike(cardId) {\r\n    //     return this._request(`${this.url}/cards/${cardId}/likes`, {\r\n    //         method: \"PUT\",\r\n    //         headers: this.headers,\r\n    //     })\r\n    // }\r\n\r\n    // cardLikeRemove(cardId) {\r\n    //     return this._request(`${this.url}/cards/${cardId}/likes`, {\r\n    //         method: \"DELETE\",\r\n    //         headers: this.headers,\r\n    //     })\r\n    // }\r\n\r\n    // postCard(item) {\r\n    //     return this._request(`${this.url}/cards/`, {\r\n    //         method: \"POST\",\r\n    //         headers: this.headers,\r\n    //         body: JSON.stringify({\r\n    //             name: item.name,\r\n    //             link: item.link\r\n    //         })\r\n    //     })\r\n    // }\r\n\r\n    setProfileInfo(item) {\r\n        return this._request(`${this.url}/users/me`, {\r\n            method: \"PATCH\",\r\n            headers: this.headers,\r\n            body: JSON.stringify({\r\n                name: item.name,\r\n                about: item.about\r\n            })\r\n        })\r\n    }\r\n\r\n    // setProfileAvatar(item) {\r\n    //     return this._request(`${this.url}/users/me/avatar`, {\r\n    //         method: \"PATCH\",\r\n    //         headers: this.headers,\r\n    //         body: JSON.stringify({\r\n    //             avatar: item.avatar,\r\n    //         })\r\n    //     })\r\n    // }\r\n\r\n    profileDataInstall() {\r\n        return this._request(`${this.url}/users/me`, {\r\n            headers: this.headers,\r\n        })\r\n    }\r\n\r\n}\r\n\r\nconst token = localStorage.getItem('token');\r\n\r\nif (token) {\r\n    console.log('Токен:', token);\r\n} else {\r\n    console.log('Токен не найден в localStorage');\r\n}\r\n\r\nexport const mainApi = new MainApi({\r\n    url: 'https://api.bazhanov.rinat.diplom.nomoredomainsrocks.ru',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n    },\r\n    credentials: 'include',\r\n})"],"mappings":"AAAA,eAAe,MAAMA,OAAO,CAAC;EACzBC,WAAWA,CAACC,IAAI,EAAE;IACd,IAAI,CAACC,GAAG,GAAGD,IAAI,CAACC,GAAG;IACnB,IAAI,CAACC,OAAO,GAAGF,IAAI,CAACE,OAAO;EAC/B;EAEAC,QAAQA,CAACF,GAAG,EAAEG,OAAO,EAAE;IACnB,OAAOC,KAAK,CAACJ,GAAG,EAAEG,OAAO,CAAC,CAACE,IAAI,CAAC,IAAI,CAACC,cAAc,CAAC;EACxD;EAEAA,cAAcA,CAACC,GAAG,EAAE;IAChB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACR,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACrB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAClD;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAC,cAAcA,CAACC,IAAI,EAAE;IACjB,OAAO,IAAI,CAACZ,QAAQ,CAAE,GAAE,IAAI,CAACF,GAAI,WAAU,EAAE;MACzCe,MAAM,EAAE,OAAO;MACfd,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,IAAI,EAAEL,IAAI,CAACK,IAAI;QACfC,KAAK,EAAEN,IAAI,CAACM;MAChB,CAAC;IACL,CAAC,CAAC;EACN;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAC,kBAAkBA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACnB,QAAQ,CAAE,GAAE,IAAI,CAACF,GAAI,WAAU,EAAE;MACzCC,OAAO,EAAE,IAAI,CAACA;IAClB,CAAC,CAAC;EACN;AAEJ;AAEA,MAAMqB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AAE3C,IAAIF,KAAK,EAAE;EACPG,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEJ,KAAK,CAAC;AAChC,CAAC,MAAM;EACHG,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;AACjD;AAEA,OAAO,MAAMC,OAAO,GAAG,IAAI9B,OAAO,CAAC;EAC/BG,GAAG,EAAE,yDAAyD;EAC9DC,OAAO,EAAE;IACL,cAAc,EAAE,kBAAkB;IAClC,eAAe,EAAG,UAASqB,KAAM;EACrC,CAAC;EACDM,WAAW,EAAE;AACjB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}